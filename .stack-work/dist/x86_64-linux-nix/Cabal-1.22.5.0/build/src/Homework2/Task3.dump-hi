
==================== FINAL INTERFACE ====================
2016-09-19 13:33:02.982848 UTC

interface itmoh_3jdjN6JgnDTFbxnus2BZhp:Homework2.Task3 7103
  interface hash: 7fcff7b0f4f7f1c24e2cb19731b9f16c
  ABI hash: 60812713a5ea4d2ac400b6d29c4964b3
  export-list hash: 99764b51dc8bda18940fc0aa4899115f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 04202c81f1977d75b6853c743de39f6b
  sig of: Nothing
  used TH splices: False
  where
exports:
  Homework2.Task3.delete
  Homework2.Task3.deleteRoot
  Homework2.Task3.find
  Homework2.Task3.fromList
  Homework2.Task3.insert
  Homework2.Task3.toList
  Homework2.Task3.Tree{Homework2.Task3.Nil Homework2.Task3.Tree}
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
d2345157369cc62da99fd472ede827a4
  $fShowTree ::
    GHC.Show.Show a => GHC.Show.Show (Homework2.Task3.Tree a)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a $dShow :: GHC.Show.Show a.
                  @ (Homework2.Task3.Tree a)
                  (Homework2.Task3.$fShowTree_$cshowsPrec @ a $dShow)
                  (Homework2.Task3.$fShowTree_$cshow @ a $dShow)
                  (Homework2.Task3.$fShowTree_$cshowList @ a $dShow) -}
1bca8e80ed7830ae91f8c8ae63dc1077
  $fShowTree1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
d2345157369cc62da99fd472ede827a4
  $fShowTree_$cshow ::
    GHC.Show.Show a => Homework2.Task3.Tree a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a $dShow :: GHC.Show.Show a x :: Homework2.Task3.Tree a ->
                 Homework2.Task3.$fShowTree_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d2345157369cc62da99fd472ede827a4
  $fShowTree_$cshowList ::
    GHC.Show.Show a => [Homework2.Task3.Tree a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   $dShow :: GHC.Show.Show a
                   eta :: [Homework2.Task3.Tree a]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Homework2.Task3.Tree a)
                   (Homework2.Task3.$fShowTree_$cshowsPrec
                      @ a
                      $dShow
                      Homework2.Task3.$fShowTree1)
                   eta
                   eta1) -}
d2345157369cc62da99fd472ede827a4
  $fShowTree_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Homework2.Task3.Tree a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
bf54c2a83dd298e408298b12d88af9d2
  $wpoly_pickLeftmost ::
    Homework2.Task3.Tree a -> (# a, Homework2.Task3.Tree a #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
d2345157369cc62da99fd472ede827a4
  data Tree a
    = Tree a (Homework2.Task3.Tree a) (Homework2.Task3.Tree a) | Nil
    Promotable
b56055e2f995ceb6eef06ea0f374ca62
  delete ::
    GHC.Classes.Ord a =>
    a -> Homework2.Task3.Tree a -> Homework2.Task3.Tree a
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A)><L,U><S,1*U> -}
842303fccdf99d1eff0fe5f1dac87933
  deleteRoot :: Homework2.Task3.Tree a -> Homework2.Task3.Tree a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: Homework2.Task3.Tree a ->
                 case ds of wild {
                   Homework2.Task3.Tree ds1 ds2 ds3
                   -> let {
                        fail :: GHC.Prim.Void# -> Homework2.Task3.Tree a
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ ds4 :: GHC.Prim.Void#[OneShot] ->
                          case ds3 of wild1 {
                            Homework2.Task3.Tree ipv ipv1 ipv2
                            -> case ds2 of wild2 {
                                 Homework2.Task3.Tree ipv3 ipv4 ipv5
                                 -> let {
                                      ds5 :: (a, Homework2.Task3.Tree a)
                                      = case Homework2.Task3.$wpoly_pickLeftmost
                                               @ a
                                               wild1 of ww { (#,#) ww1 ww2 ->
                                        (ww1, ww2) }
                                    } in
                                    Homework2.Task3.Tree
                                      @ a
                                      (case ds5 of wild3 { (,) y rt' -> y })
                                      wild2
                                      (case ds5 of wild3 { (,) y rt' -> rt' })
                                 Homework2.Task3.Nil -> wild1 }
                            Homework2.Task3.Nil -> ds2 }
                      } in
                      case ds2 of wild1 {
                        Homework2.Task3.Tree ipv ipv1 ipv2 -> fail GHC.Prim.void#
                        Homework2.Task3.Nil
                        -> case ds3 of wild2 {
                             Homework2.Task3.Tree ipv ipv1 ipv2 -> fail GHC.Prim.void#
                             Homework2.Task3.Nil -> Homework2.Task3.Nil @ a } }
                   Homework2.Task3.Nil -> Homework2.Task3.Nil @ a }) -}
77165efca3f970aa2c5ff310d0a0ddd7
  find ::
    GHC.Classes.Ord a => a -> Homework2.Task3.Tree a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A)><L,U><S,1*U> -}
4d6b66a2a8f554a1ae2b10a0f3e2c137
  fromList :: GHC.Classes.Ord a => [a] -> Homework2.Task3.Tree a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ a $dOrd :: GHC.Classes.Ord a eta :: [a] ->
                 letrec {
                   go :: [a] -> Homework2.Task3.Tree a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [a] ->
                     case ds of wild {
                       [] -> Homework2.Task3.Nil @ a
                       : y ys -> Homework2.Task3.insert @ a $dOrd y (go ys) }
                 } in
                 go eta) -}
7ad8aad62528336e50be05dfb242ff52
  insert ::
    GHC.Classes.Ord a =>
    a -> Homework2.Task3.Tree a -> Homework2.Task3.Tree a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),A,C(C1(U)),A,A,A,A,A)><L,U><S,1*U> -}
ee357b507306b503d4546b77b4b2dc88
  toList :: Homework2.Task3.Tree a -> [a]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 Homework2.Task3.toList_toList' @ a (GHC.Types.[] @ a)) -}
859447af0a7838d04097d32a9f0ad0d6
  toList_toList' :: [a] -> Homework2.Task3.Tree a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
instance GHC.Show.Show [Homework2.Task3.Tree]
  = Homework2.Task3.$fShowTree
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

